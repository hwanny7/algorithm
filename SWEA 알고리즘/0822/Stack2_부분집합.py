def f(i, N):        # 세 칸을 채운다.
    if i == N:      #채울 칸의 인덱스랑 채울 칸의 갯수가 같아지면 중단, 0, 1, 2칸까지만 만들면 됨
        print(bit)
    else:
        bit[i] = 1  # A[i]가 부분집합에 포함
        f(i+1, N)   # 첫번째 자리를 결정하고 그 다음을 결정, i+1을 결정하러 ㄱㄱ
        bit[i] = 0
        f(i+1, N)

A = [1,2,3]
bit = [0] * 3
f(0, 3)

# def f(i, N):        # 세 칸을 채운다.
#     global ans
#     if i == N:      #채울 칸의 인덱스랑 채울 칸의 갯수가 같아지면 중단, 0, 1, 2칸까지만 만들면 됨
#         s = 0       # 부분 집합의 합
#         for i in range(N):
#             if bit[i]:  # i가 1일 경우 [1인 경우 그 숫자에 불이 들어온거임]
#                 s += A[i]
#         if s == 10:
#             ans += 1     #부분집합의 합이 10인 경우의 수
#             for i in range(N):
#                 if bit[i]:
#                     print(A[i], end = ' ')      #부분집합이 10일 때 경우의 수 출력
#             print()
#
#     else:
#         bit[i] = 1  # A[i]가 부분집합에 포함
#         f(i+1, N)   # 첫번째 자리를 결정하고 그 다음을 결정
#         bit[i] = 0
#         f(i+1, N)
#
# A = [1,2,3,4,5,6,7,8,9,10]
# bit = [0] * 10
# ans = 0
# f(0, 10)
# print(ans)

